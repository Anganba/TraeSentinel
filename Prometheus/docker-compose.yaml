volumes:
  prometheus-data:
    driver: local

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.retention.time=7d
      - --storage.tsdb.retention.size=2GB
      - --web.enable-remote-write-receiver
      - --log.level=debug
    # ports:
    #   - "9090:9090"
    labels:
      - "traefik.enable=true"

      # --- MIDDLEWARE DEFINITIONS ---
      # 1. Middleware to redirect HTTP â†’ HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # 2. Middleware for Basic Auth
      - "traefik.http.middlewares.prometheus-auth.basicauth.users=admin:${TRAEFIK_PASSWORD}"

      # --- ROUTER DEFINITIONS ---
      # 3. HTTP router (non-secure)
      # This router just catches HTTP and applies the redirect
      - "traefik.http.routers.prometheus.rule=Host(\"prometheus.${DOMAIN}\")"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.routers.prometheus.middlewares=redirect-to-https"

      # 4. HTTPS router (secure)
      # This router handles HTTPS, enables TLS, and applies the auth middleware
      - "traefik.http.routers.prometheus-secure.rule=Host(\"prometheus.${DOMAIN}\")"
      - "traefik.http.routers.prometheus-secure.entrypoints=websecure"
      - "traefik.http.routers.prometheus-secure.tls=true" 
      - "traefik.http.routers.prometheus-secure.tls.certresolver=${PROVIDER}"
      - "traefik.http.routers.prometheus-secure.service=prometheus-svc"
      - "traefik.http.routers.prometheus-secure.middlewares=prometheus-auth" # <--applies to 'prometheus-secure

      # 5. Service definition
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus

    restart: unless-stopped
    networks:
      - frontend

networks:
  frontend:
    external: true
